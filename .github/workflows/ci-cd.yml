name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Automatically trigger on push to master branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest

    - name: Save Docker image tag
      run: echo "latest" > image-tag.txt

    - name: Upload Docker image tag
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image-tag.txt

  manual-approval:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Wait for manual approval
      run: echo "Manual approval step. Please click 'Run workflow' in the Actions tab to continue."

  run-python-script:
    needs: [build, manual-approval]
    runs-on: ubuntu-latest

    steps:
    - name: Download Docker image tag
      uses: actions/download-artifact@v4
      with:
        name: image-tag
        path: ./artifacts

    - name: Check if Docker image tag exists
      run: if [ ! -f ./artifacts/image-tag.txt ]; then echo "Docker image tag not found" && exit 1; fi

    - name: Login to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Pull Docker image
      run: |
        IMAGE_TAG=$(cat ./artifacts/image-tag.txt)
        docker pull ${{ secrets.DOCKER_USERNAME }}/my-python-app:$IMAGE_TAG

    - name: Run Python script in Docker container
      run: |
        IMAGE_TAG=$(cat ./artifacts/image-tag.txt)
        docker run ${{ secrets.DOCKER_USERNAME }}/my-python-app:$IMAGE_TAG python app.py

